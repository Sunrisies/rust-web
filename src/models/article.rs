//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12
use sea_orm::{entity::prelude::*, DeleteResult};
use serde::{Deserialize, Serialize};
use serde_json::Value as JsonValue;
#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "article")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub content: String,
    pub cover: String,
    pub author: String,
    pub publish_time: DateTime,
    pub update_time: DateTime,
    pub views: i32,
    pub is_top: i8,
    pub is_recommend: i8,
    pub is_delete: i8,
    pub is_publish: i8,
    pub is_hide: i8,
    pub description: String,
    pub size: i32,
    #[sea_orm(column_name = "categoryId")]
    pub category_id: Option<i32>,
    #[sea_orm(unique)]
    pub uuid: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::article_tags::Entity")]
    ArticleTags,
    #[sea_orm(
        belongs_to = "super::categories::Entity",
        from = "Column::CategoryId",
        to = "super::categories::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Categories,
}

impl Related<super::article_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleTags.def()
    }
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Categories.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::article_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::article_tags::Relation::Article.def().rev())
    }
}

impl From<Model> for JsonValue {
    fn from(model: Model) -> JsonValue {
        serde_json::to_value(model).unwrap()
    }
}

impl TryFrom<JsonValue> for Model {
    type Error = serde_json::Error;

    fn try_from(value: JsonValue) -> Result<Self, Self::Error> {
        serde_json::from_value(value)
    }
}

impl ActiveModelBehavior for ActiveModel {}
