//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "third_party_libraries")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub official_url: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub metadata: Option<Json>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub category_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::categories::Entity",
        from = "Column::CategoryId",
        to = "super::categories::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Categories,
    #[sea_orm(has_many = "super::library_tags::Entity")]
    LibraryTags,
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Categories.def()
    }
}

impl Related<super::library_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LibraryTags.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::library_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::library_tags::Relation::ThirdPartyLibraries
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
